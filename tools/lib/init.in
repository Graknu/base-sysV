#!/bin/sh

PATH=/bin:/usr/bin:/sbin:/usr/sbin
export PATH

problem()
{
   printf "Encountered a problem!\n\nDropping you to a shell.\n\n"
   sh
}

no_device()
{
   printf "The device %s, which is supposed to contain the\n" $1
   printf "root file system, does not exist.\n"
   printf "Please fix this problem and exit this shell.\n\n"
}

no_mount()
{
   printf "Could not mount device %s\n" $1
   printf "Sleeping forever. Please reboot and fix the kernel command line.\n\n"
   printf "Maybe the device is formatted with an unsupported file system?\n\n"
   printf "Or maybe filesystem type autodetection went wrong, in which case\n"
   printf "you should add the rootfstype=... parameter to the kernel command line.\n\n"
   printf "Available partitions:\n"
}

do_mount_root()
{
   [ -n "$rootflags" ] && rootflags="$rootflags,"
   rootflags="$rootflags$ro"

   case "$root" in
      /dev/* ) device=$root ;;
      UUID=* ) eval $root; device="/dev/disk/by-uuid/$UUID"  ;;
      LABEL=*) eval $root; device="/dev/disk/by-label/$LABEL" ;;
      ""     ) echo "No root device specified." ; problem    ;;
   esac

   while [ ! -b "$device" ] ; do
       no_device $device
       problem
   done
   if  [ "$rootfstype" != "auto" ]; then
	rootfstype=`print_file_system $device`
   fi
   if [ "$rootfstype" == "no" ]; then
       no_mount $device
       cat /proc/partitions
       while true ; do sleep 10000 ; done
   fi
   [ -z "$overlayroot" ] && mountpoint=/.root  || mountpoint=/.roRoot
   mkdir -p $mountpoint
   if ! mount -n -t "$rootfstype" -o "$rootflags" "$device" $mountpoint ; then
       no_mount $device
       cat /proc/partitions
       while true ; do sleep 10000 ; done
   else
       log_info_msg "Mounting root file system ${root} in read-only mode..."
       evaluate_retval
   fi
   if [ -n "$overlayroot" ]; then
     overlaydevice=$overlayroot;         # /dev/mapper/<vg>/<lv>
     mkdir -p /mnt/OVL
     if ! mount -n "$overlaydevice" /mnt/OVL; then
       no_mount $overlaydevice
       cat /proc/partitions
       while true ; do sleep 10000 ; done
     else
       log_info_msg "Mounting overlay upper file system ${overlayroot}..."
       evaluate_retval
     fi
     mkdir -p /mnt/OVL/{upper,work}
     if ! mount -n -t overlay -o lowerdir=$mountpoint,upperdir=/mnt/OVL/upper,workdir=/mnt/OVL/work overlayrootfs /.root; then
       no_mount "overlayrootfs"
       cat /proc/partitions
       while true ; do sleep 10000 ; done
     else
       log_info_msg "Mounting overlay root filesystem..."
       evaluate_retval
     fi
   fi
}

do_mount_in_ram()
{
	# squasfs files are in ${1} on the initrd
	# RW folders
	for DIR in var run etc root
	do
		if [ -f ${1}/$DIR.squashfs ];then
			mkdir /DIR
			[ "$verbose" == "no" ] || echo "mount -o loop -t squashfs ${1}/$DIR.squashfs /DIR"
			mount -o loop -t squashfs ${1}/$DIR.squashfs /DIR || problem
			mkdir -p /$DIR > /dev/null 2>&1
			cp -a /DIR/* /$DIR/ > /dev/null 2>&1
			umount /DIR
			rm -r /DIR
			if [ "$DIR" == "root" ]; then
				chmod 750 /root
			fi
		fi
	done
	# RO folders
	for DIR in usr lib sbin bin
	do
		if [ -f ${1}/$DIR.squashfs ];then
			mkdir /$DIR > /dev/null 2>&1
			[ "$verbose" == "no" ] || printf "mount -o loop -t squashfs %s/%s.squashfs /%s" ${1} $DIR $DIR
			mount -o loop -t squashfs ${1}/$DIR.squashfs /$DIR || problem
		fi
	done		
}

find_media() {
   local PI
   EXPECT_LABEL="nutyxcd"
   for SYS in /sys/block/sd* /sys/block/sd*/sd* /sys/block/sr* ; do
	   [ "$verbose" == "no" ] || printf "Looking in %s for media\n" $SYS
      if [ ! -d "$SYS" ]; then  continue; fi
      DEV=/dev/${SYS##*/}
      PI=`/sbin/blkid $DEV`
      for param in $PI; do
        case $param in LABEL=*)
          LABEL=`echo ${param#LABEL=}|sed s/\"//g`;;
	esac
      done
      if [ ${LABEL} == ${EXPECT_LABEL} ]  2>/dev/null ; then
	ln -s $DEV /dev/nutyx-cd
	mkdir  -p /media/cdrom 2>/dev/null
	[ "$verbose" == "no" ] || printf "mount -n /dev/nutyx-cd /media/cdrom\n"
	mount -n /dev/nutyx-cd /media/cdrom
	[ -d /media/cdrom/depot ] && echo $DEV > /tmp/depot
	# If RAM Available > 1Gb (lets say around 1 000 000 kb) we get rid of the key (mounted)
	[ `cat /proc/meminfo|grep MemAvail|sed "s/[^[:digit:]]*//g"` -gt 1000000 ] || break
	mkdir /boot
	for i in `ls /media/cdrom/isolinux/boot/`
	do
	  cp  /media/cdrom/isolinux/boot/$i /boot/
	done
	cp /media/cdrom/isolinux/kernel /boot/kernel
	umount /media/cdrom
	break
      fi
   done
}

MainLoop(){
   while [ ! -f /root/boot ];
   do
	if [ "$verbose" == "yes" ]; then
		ListModules
		printf "Launch /etc/rc.d/init.d/setup-nutyx ...\n"
	fi
	/etc/rc.d/init.d/setup-nutyx || problem
   done
   clear
}
LoadModules() {
 for i in dm-mod md-mod ehci-pci \
 xhci-pci xhci-hcd ehci-hcd nls_iso8859_1 \
 uhci-hcd uas sr_mod usb-storage loop \
 squashfs isofs vfat fat nls_cp437
 do
  if [ "$verbose" == "yes" ]; then
    modprobe -v $i
  else
    modprobe $i
  fi
 done
}
ListModules() {
  lsmod
  printf "Press <enter> to continue ...\n"
  read a
}
# **********
# Begin here
# **********
printf "Starting initrd...\n"

init=/sbin/init
overlayroot=
root=
rootdelay=
rootfstype=auto
ro="ro"
rootflags=
device=
verbose="no"
fromdev=/dev/sdb1
fromiso=

. /lib/lsb/init-functions

do_mount_virtualfs

read -r cmdline < /proc/cmdline

for param in $cmdline ; do
  case $param in
    init=*       ) init=${param#init=}               ;;
    root=*       ) root=${param#root=}               ;;
    rootdelay=*  ) rootdelay=${param#rootdelay=}     ;;
    overlayroot=*) overlayroot=${param#overlayroot=} ;;
    rootfstype=* ) rootfstype=${param#rootfstype=}   ;;
    rootflags=*  ) rootflags=${param#rootflags=}     ;;
    fromdev=*    ) fromdev=${param#fromdev=}         ;;
    fromiso=*    ) fromiso=${param#fromiso=}         ;;
    ro           ) ro="ro"                           ;;
    rw           ) ro="rw"                           ;;
    quiet        ) export verbose="no"               ;;
    testiso      ) export verbose="yes"              ;;
    testinitrd   ) export verbose="yes"              ;;
  esac
done

if [ -d /lib/modules ] && [ -n "$rootdelay" ]; then
        [ "$verbose" == "no" ] || printf "Start udev...\n"
        do_start_udev
fi

if [ -f /etc/mdadm.conf ]; then

  [ "$verbose" == "no" ] || printf "mdadm -As...\n"
  /sbin/mdadm -As

  [ "$verbose" == "no" ] || printf "mdadm --auto-detect...\n"
  /sbin/mdadm --auto-detect
  ### First we activate lvm if possible
  if [ -f /sbin/lvm ]; then
    [ "$verbose" == "no" ] || printf "/sbin/lvm vgchange --ignorelockingfailure -ay\n"
    /sbin/lvm vgchange --ignorelockingfailure -ay
    if [ $? = 0 ]; then
       [ "$verbose" == "no" ] || printf "/sbin/lvm vgscan --ignorelockingfailure --mknodes\n"
       /sbin/lvm vgscan --ignorelockingfailure --mknodes
    fi
  fi
fi

if [ -n "$rootdelay" ] ; then
	[ "$verbose" == "no" ] || printf "Wait  %s second(s) ...\n" $rootdelay
	sleep "$rootdelay"
fi

if [ "$root" == "" ]; then
	LoadModules
	if [ ! -f /etc/rc.d/init.d/setup-nutyx ]; then
		find_media
		if [ ! -L /dev/nutyx-cd ]; then
			[ "$verbose" == "no" ] || printf "Media not found yet, trying again in 5 sec\n"
			sleep 5
			find_media
		fi
		if [ -d /media/cdrom/isolinux/boot ]; then
			do_mount_in_ram /media/cdrom/isolinux/boot
		else
 			if [ -n "$fromiso" ]; then
 				mkdir -p /media/{fromdev,cdrom}
 				mount -o ro ${fromdev} /media/fromdev
 				mount -o loop /media/fromdev${fromiso} /media/cdrom
 				do_mount_in_ram /media/cdrom/isolinux/boot
 			else
 				do_mount_in_ram /boot
 			fi

		fi
	else
		do_mount_in_ram /boot
	fi
	if [ ! -f /etc/rc.d/init.d/setup-nutyx ]; then
		no_mount
		sh
	else
		if [ "$verbose" == "yes" ]; then
			printf "/etc/rc.d/init.d/setup-nutyx exist ...\n"
			ls -lt /etc/rc.d/init.d/setup-nutyx
		fi
	fi
	if [ -d /lib/modules ] && [ -n "$rootdelay" ]; then
		# If Eudev was already started
		# We need to restart it for loading keyboards, screen, usb needed modules
		[ "$verbose" == "no" ] || printf "Stop udev...\n"
		do_stop_udev

		[ "$verbose" == "no" ] || printf "Wait %s second(s) ...\n" $rootdelay
		sleep $rootdelay
	fi
	[ "$verbose" == "no" ] || printf "Start udev ...\n"
        do_start_udev

	[ "$verbose" == "no" ] || printf "Wait %s second(s) ...\n" $rootdelay
	[ -n "$rootdelay" ] && sleep $rootdelay

	[ "$verbose" == "no" ] || printf "Start sysklogd ...\n"
	do_start_sysklogd
	[ "$verbose" == "no" ]  && clear

	MainLoop
	root=`cat /root/boot`

	[ "$verbose" == "no" ] || printf "Stop udev ...\n"
	do_stop_udev

	[ "$verbose" == "no" ] || printf "Stop sysklogd ...\n"
	do_stop_sysklogd

	cd /

	for DIR in usr lib sbin bin
	do
		[ "$verbose" == "no" ] || printf "umount /%s ...\n" $DIR
		umount /$DIR > /dev/null 2>&1
	done
fi

mkdir /.root
do_mount_root

if [ -d /lib/modules ] && [ -n "$rootdelay" ]; then
	[ "$verbose" == "no" ] || printf "Stop udev ...\n"
	do_stop_udev
fi

cd /.root
exec switch_root /.root "$init" "$@" > /dev/null 2>&1
